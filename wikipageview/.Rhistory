#with format YYYYMMDD, later than starting date, with format YYYYMMDDHH when period = "hourly"
ending,
sep = "/")
response <-GET(url)
result <- fromJSON(content(response, as="text", encoding = "UTF-8"))
#Catch bad request and send a reminder
tryCatch({
if(response$status_code != 200) {
cat(result$detail)
cat("\n")
stop()
}}, error = function(err) {
stop("bad request, please see above error message")
}, NaN)
#transform dataset to data frame
result <- data.frame(result)
#pick timestamp and view count
viewcount <- result[, c(5,6)]
#transform timestamp to date value
viewcount$items.timestamp <- ymd(str_sub(viewcount$items.timestamp, 1, -3))
return(viewcount)
}
get_project_vc("es.wikisource", tool = "desktop", starting = "2011112617",
ending = "2012020102", period = "hourly")
#' @param project_title the project name, values from ISO language code(ISO 639-1) plus project type(e.g. en.wikipedia, ca.wikinews, zh.wikisource)
#' project_title refer to https://en.wikipedia.org/wiki/Main_Page (In other projects;languages)
#' @param tool access tool,values in ("all-access", "desktop", "mobile-app", "mobile-web") are allowed for tool, with default "all-access"
#' @param method method used to view page, values in ("all-agents", "user", "spider", "automated") are allowed for method, with default "all-agents"
#' @param starting period start timestamp with format YYYYMMDDHH, for example 2020010212(12:00, Jan 2nd, 2021), with the default value the timestamp of the day before yesterday
#' @param ending period start timestamp with format YYYYMMDDHH, for example 2020010212(12:00, Jan 2nd, 2021), with the default value the timestamp of yesterday
#' @param period period type should be 'daily' or 'monthly', with the default value 'daily'
#' @export
#' @examples
#' get_project_vc("zh.wikipedia", method = "user", starting = "2021010112", period = "hourly")
get_project_vc <- function(project_title,
tool = "all-access",
method = "all-agents",
starting = paste(substr(toString(Sys.Date()-2),1,4), substr(toString(Sys.Date()-2),6,7), substr(toString(Sys.Date()-2),9,10), substr(toString(Sys.time()-2),12,13), sep = ""),
ending = paste(substr(toString(Sys.Date()-1),1,4), substr(toString(Sys.Date()-1),6,7), substr(toString(Sys.Date()-1),9,10), substr(toString(Sys.time()-1),12,13), sep = ""),
period = "daily"){
url <- paste(
"https://wikimedia.org/api/rest_v1/metrics/pageviews/aggregate",
# values from ISO language code plus .wikipedia(e.g. en.wikipedia, ca.wikipedia, zh.wikipedia)
project_title,
#values in ["all-access", "desktop", "mobile-app", "mobile-web"] is allowed for tool
tool,
#values in ["all-agents", "user", "spider", "automated"] is allowed for tool
method,
#values in ["hourly", "daily", "monthly"] is allowed for method
period,
#start time not earlier than 20150701
#with format YYYYMMDD, with format YYYYMMDDHH when period = "hourly"
starting,
#with format YYYYMMDD, later than starting date, with format YYYYMMDDHH when period = "hourly"
ending,
sep = "/")
response <-GET(url)
result <- fromJSON(content(response, as="text", encoding = "UTF-8"))
#Catch bad request and send a reminder
tryCatch({
if(response$status_code != 200) {
cat(result$detail)
cat("\n")
stop()
}}, error = function(err) {
stop("bad request, please see above error message")
}, warning = function(w) {
cat("warning")
})
#transform dataset to data frame
result <- data.frame(result)
#pick timestamp and view count
viewcount <- result[, c(5,6)]
#transform timestamp to date value
viewcount$items.timestamp <- ymd(str_sub(viewcount$items.timestamp, 1, -3))
return(viewcount)
}
get_project_vc("es.wikisource", tool = "desktop", starting = "2011112617",
ending = "2012020102", period = "hourly")
if(1 != 200) {
cat(result$detail)
cat("\n")
stop()
}}, error = function(err) {
tryCatch({
if(1 != 200) {
cat(result$detail)
cat("\n")
stop()
}}, error = function(err) {
stop("bad request, please see above error message")
}, warning = function(w) {
cat("warning")
})
tryCatch({
if( 1!= 200) {
cat(result$detail)
cat("\n")
stop()
}}, error = function(err) {
stop("bad request, please see above error message")
}, warning = function(w) {
cat("warning")
})
#' @param project_title the project name, values from ISO language code(ISO 639-1) plus project type(e.g. en.wikipedia, ca.wikinews, zh.wikisource)
#' project_title refer to https://en.wikipedia.org/wiki/Main_Page (In other projects;languages)
#' @param tool access tool,values in ("all-access", "desktop", "mobile-app", "mobile-web") are allowed for tool, with default "all-access"
#' @param method method used to view page, values in ("all-agents", "user", "spider", "automated") are allowed for method, with default "all-agents"
#' @param starting period start timestamp with format YYYYMMDDHH, for example 2020010212(12:00, Jan 2nd, 2021), with the default value the timestamp of the day before yesterday
#' @param ending period start timestamp with format YYYYMMDDHH, for example 2020010212(12:00, Jan 2nd, 2021), with the default value the timestamp of yesterday
#' @param period period type should be 'daily' or 'monthly', with the default value 'daily'
#' @export
#' @examples
#' get_project_vc("zh.wikipedia", method = "user", starting = "2021010112", period = "hourly")
get_project_vc <- function(project_title,
tool = "all-access",
method = "all-agents",
starting = paste(substr(toString(Sys.Date()-2),1,4), substr(toString(Sys.Date()-2),6,7), substr(toString(Sys.Date()-2),9,10), substr(toString(Sys.time()-2),12,13), sep = ""),
ending = paste(substr(toString(Sys.Date()-1),1,4), substr(toString(Sys.Date()-1),6,7), substr(toString(Sys.Date()-1),9,10), substr(toString(Sys.time()-1),12,13), sep = ""),
period = "daily"){
url <- paste(
"https://wikimedia.org/api/rest_v1/metrics/pageviews/aggregate",
# values from ISO language code plus .wikipedia(e.g. en.wikipedia, ca.wikipedia, zh.wikipedia)
project_title,
#values in ["all-access", "desktop", "mobile-app", "mobile-web"] is allowed for tool
tool,
#values in ["all-agents", "user", "spider", "automated"] is allowed for tool
method,
#values in ["hourly", "daily", "monthly"] is allowed for method
period,
#start time not earlier than 20150701
#with format YYYYMMDD, with format YYYYMMDDHH when period = "hourly"
starting,
#with format YYYYMMDD, later than starting date, with format YYYYMMDDHH when period = "hourly"
ending,
sep = "/")
response <-GET(url)
result <- fromJSON(content(response, as="text", encoding = "UTF-8"))
#Catch bad request and send a reminder
tryCatch({
if(response$status_code != 200) {
cat(result$detail)
cat("\n")
stop()
}}, error = function(err) {
stop("bad request, please see above error message")
stop()
}, warning = function(w) {
cat("warning")
})
#transform dataset to data frame
result <- data.frame(result)
#pick timestamp and view count
viewcount <- result[, c(5,6)]
#transform timestamp to date value
viewcount$items.timestamp <- ymd(str_sub(viewcount$items.timestamp, 1, -3))
return(viewcount)
}
get_project_vc("es.wikisource", tool = "desktop", starting = "2011112617",
ending = "2012020102", period = "hourly")
abb <- function() {
tryCatch({
if(1 != 200) {
cat(result$detail)
cat("\n")
stop()
}}, error = function(err) {
stop("bad request, please see above error message")
stop()
}, warning = function(w) {
cat("warning")
})
}
abb
abb <- function(){
tryCatch({
if(1 != 200) {
cat(result$detail)
cat("\n")
stop()
}}, error = function(err) {
stop("bad request, please see above error message")
stop()
}, warning = function(w) {
cat("warning")
})
}
abb
abb()
abb <- function(val){
tryCatch({
if(val != 200) {
cat(result$detail)
cat("\n")
stop()
}}, error = function(err) {
stop("bad request, please see above error message")
stop()
}, warning = function(w) {
cat("warning")
})
}
abb(val)
abb <- function(val){
tryCatch({
if(val != 200) {
cat(result$detail)
cat("\n")
stop()
}}, error = function(err) {
print("bad request, please see above error message")
}, warning = function(w) {
cat("warning")
})
}
abb(val)
abb <- function(val){
tryCatch({
if(val != 200) {
cat(result$detail)
cat("\n")
stop()
}}, error = function(err) {
print("bad request, please see above error message")
stop()
}, warning = function(w) {
cat("warning")
})
}
abb(val)
cat("bad request, please see above error message")
abb <- function(val){
tryCatch({
if(val != 200) {
cat(result$detail)
cat("\n")
stop("123")
}}, error = function(err) {
print(err)
}, warning = function(w) {
cat("warning")
})
}
abb(val)
return(err)
abb <- function(val){
tryCatch({
if(val != 200) {
cat(result$detail)
cat("\n")
stop("123")
}}, error = function(err) {
return(err)
}, warning = function(w) {
cat("warning")
})
}
abb(val)
#' @param project_title the project name, values from ISO language code(ISO 639-1) plus project type(e.g. en.wikipedia, ca.wikinews, zh.wikisource)
#' project_title refer to https://en.wikipedia.org/wiki/Main_Page (In other projects;languages)
#' @param tool access tool,values in ("all-access", "desktop", "mobile-app", "mobile-web") are allowed for tool, with default "all-access"
#' @param method method used to view page, values in ("all-agents", "user", "spider", "automated") are allowed for method, with default "all-agents"
#' @param starting period start timestamp with format YYYYMMDDHH, for example 2020010212(12:00, Jan 2nd, 2021), with the default value the timestamp of the day before yesterday
#' @param ending period start timestamp with format YYYYMMDDHH, for example 2020010212(12:00, Jan 2nd, 2021), with the default value the timestamp of yesterday
#' @param period period type should be 'daily' or 'monthly', with the default value 'daily'
#' @export
#' @examples
#' get_project_vc("zh.wikipedia", method = "user", starting = "2021010112", period = "hourly")
get_project_vc <- function(project_title,
tool = "all-access",
method = "all-agents",
starting = paste(substr(toString(Sys.Date()-2),1,4), substr(toString(Sys.Date()-2),6,7), substr(toString(Sys.Date()-2),9,10), substr(toString(Sys.time()-2),12,13), sep = ""),
ending = paste(substr(toString(Sys.Date()-1),1,4), substr(toString(Sys.Date()-1),6,7), substr(toString(Sys.Date()-1),9,10), substr(toString(Sys.time()-1),12,13), sep = ""),
period = "daily"){
url <- paste(
"https://wikimedia.org/api/rest_v1/metrics/pageviews/aggregate",
# values from ISO language code plus .wikipedia(e.g. en.wikipedia, ca.wikipedia, zh.wikipedia)
project_title,
#values in ["all-access", "desktop", "mobile-app", "mobile-web"] is allowed for tool
tool,
#values in ["all-agents", "user", "spider", "automated"] is allowed for tool
method,
#values in ["hourly", "daily", "monthly"] is allowed for method
period,
#start time not earlier than 20150701
#with format YYYYMMDD, with format YYYYMMDDHH when period = "hourly"
starting,
#with format YYYYMMDD, later than starting date, with format YYYYMMDDHH when period = "hourly"
ending,
sep = "/")
response <-GET(url)
result <- fromJSON(content(response, as="text", encoding = "UTF-8"))
#check if bad request and send a reminder
if(response$status_code != 200) {
cat(result$detail)
cat("\n")
stop("bad request, please see above error message")
}
#transform dataset to data frame
result <- data.frame(result)
#pick timestamp and view count
viewcount <- result[, c(5,6)]
#transform timestamp to date value
viewcount$items.timestamp <- ymd(str_sub(viewcount$items.timestamp, 1, -3))
return(viewcount)
}
get_project_vc("es.wikisource", tool = "desktop", starting = "2011112617",
ending = "2012020102", period = "hourly")
if(1 != 200) {
cat(result$detail)
cat("\n")
stop("bad request, please see above error message")
}
if(1 != 200) {
cat(result$detail)
cat("\n")
stop("bad request, please see above error message")
}
try(if(1 != 200) {
cat(result$detail)
cat("\n")
} stop("bad request, please see above error message"))
cat(12345)
try(if(1 != 200) {
cat(12345)
cat("\n")
} stop("bad request, please see above error message"))
iter <- 12
try(if(iter > 10) stop("too many iterations"))
abc <- function(val) {
iter <- 12
try(if(iter > 10) stop("too many iterations"))
}
abc(123)
f <- function(a, b){
if (a == 0){
stop("error message")
}
}
f(0,2)
f <- function(a, b){
if (a == 0){
throw("error message")
}
}
f(0,2)
df <- data.frame(a = numeric(), b = numeric())
stopifnot(!is.null(df$c))
logit <- function(x){
if( any(x < 0 | x > 1) ) stop('x not between 0 and 1')
log(x / (1 - x) )
}
logit(0.5)
logit(2)
get_project_vc("es.wikisource", tool = "desktop", starting = "2011112617",
ending = "2012020102", period = "hourly")
devtools::load_all()
document()
build()
devtools::check()
devtools::load_all()
document()
build()
devtools::check()
vignette("foo")
vignette("foo")
vignette("foo")
vignette("wikipageview")
vignette(package="ggplot2")
vignette(package="wikipageview")
vignette(package="wikiageview")
vignette(package="wikipageview")
vignette(package="ggplot2")
vignette("ggplot2-specs")
p2 <- get_project_top("wikidata", top = "top", year = "2018", mon = "12", day = "12")
head(p2)
p4 <- get_project_top("species.wikimedia", top = "top-by-country", year = "2018", mon = "12", day = "12")
p1 <- get_project_top("ca.wikibook", top = "top", year = "2018", mon = "05", day = "03")
p1 <- get_project_top("ca.wikibook", top = "top", year = "2018", mon = "05", day = "03")
p1 <- get_project_top("en.wikibook", top = "top", year = "2018", mon = "05", day = "03")
p1 <- get_project_top("ca.wikibooks", top = "top", year = "2018", mon = "05", day = "03")
p2 <- get_project_top("wikidata", top = "top", year = "2019", mon = "12", day = "07")
p3 <- get_project_top("ja.wikisource", top = "top-by-country", year = "2017", mon = "03", day = "11")
p4 <- get_project_top("species.wikimedia", top = "top-by-country", year = "2020", mon = "09", day = "24")
expect_equal(typeof(p1), "list")
expect_equal(nrow(p1), 61)
expect_equal(nrow(p1), 456)
expect_equal(typeof(p2), "list")
expect_equal(nrow(p2), 1522)
expect_equal(nrow(p2), 991)
expect_equal(typeof(p3), "list")
expect_equal(ncol(p3), 2)
p4[1,1]
p4[1,]
p4[1,4]
expect_equal(p4[1,4], 229000)
test_that("test article view count", {
expect_equal(typeof(p1), "list")
expect_equal(nrow(p1), 456)
expect_equal(typeof(p2), "list")
expect_equal(nrow(p2), 991)
expect_equal(typeof(p3), "list")
expect_equal(ncol(p3), 4)
expect_equal(typeof(p4), "list")
expect_equal(p4[1,4], 229000)
})
p1 <- get_project_ud("en.wikipedia", start = "20161010", end = "20171012")
p2 <- get_project_ud("wikimania.wikimedia", method = "desktop-site", start = "2018020510", end = "20180923")
p3 <- get_project_ud("ca.wikiversity", method = "mobile-site", start = "20180101", end = "20201231", period = "monthly")
p3 <- get_project_ud("ca.wikiversity", method = "mobile-site", start = "20180101", end = "20201231", period = "monthly")
p3 <- get_project_ud("en.wikiversity", method = "mobile-site", start = "20180101", end = "20201231", period = "monthly")
p1 <- get_project_ud("ca.wikipedia", start = "20161010", end = "20171012")
p2 <- get_project_ud("wikimania.wikimedia", method = "desktop-site", start = "2018020510", end = "20180923")
p3 <- get_project_ud("en.wikiversity", method = "mobile-site", start = "20180101", end = "20201231", period = "monthly")
p2 <- get_project_ud("wikimedia", method = "desktop-site", start = "2018020510", end = "20180923")
p2 <- get_project_ud("ca.wikimedia", method = "desktop-site", start = "2018020510", end = "20180923")
p2 <- get_project_ud("wikimania.wikimedia", method = "desktop-site", start = "2018020510", end = "20180923")
p2 <- get_project_ud("ja.wikimedia", method = "desktop-site", start = "2018020510", end = "20180923")
p2 <- get_project_ud("ca.wikimedia", method = "desktop-site", start = "2018020510", end = "20180923")
p2 <- get_project_ud("en.wikimedia", method = "desktop-site", start = "2018020510", end = "20180923")
p2 <- get_project_ud("zh.wikimedia", method = "desktop-site", start = "2018020510", end = "20180923")
p2 <- get_project_ud("mediawiki", method = "desktop-site", start = "2018020510", end = "20180923")
p1 <- get_project_ud("ca.wikipedia", start = "20161010", end = "20171012")
p2 <- get_project_ud("mediawiki", method = "desktop-site", start = "2018020510", end = "20180923")
p3 <- get_project_ud("en.wikiversity", method = "mobile-site", start = "20180101", end = "20201231", period = "monthly")
expect_equal(typeof(p1), "list")
expect_equal(nrow(p1), 61)
expect_equal(nrow(p1), 368)
expect_equal(typeof(p2), "list")
expect_equal(nrow(p2), 1522)
expect_equal(nrow(p2), 231)
expect_equal(typeof(p3), "list")
expect_equal(ncol(p3), 2)
test_that("test article view count", {
expect_equal(typeof(p1), "list")
expect_equal(nrow(p1), 368)
expect_equal(typeof(p2), "list")
expect_equal(nrow(p2), 231)
expect_equal(typeof(p3), "list")
expect_equal(ncol(p3), 4)
})
library(wikipageview)
p1 <- get_project_ud("ca.wikipedia", start = "20161010", end = "20171012")
p2 <- get_project_ud("mediawiki", method = "desktop-site", start = "2018020510", end = "20180923")
p3 <- get_project_ud("en.wikiversity", method = "mobile-site", start = "20180101", end = "20201231", period = "monthly")
test_that("test article view count", {
expect_equal(typeof(p1), "list")
expect_equal(nrow(p1), 368)
expect_equal(typeof(p2), "list")
expect_equal(nrow(p2), 231)
expect_equal(typeof(p3), "list")
expect_equal(ncol(p3), 4)
})
p1 <- get_project_top("ca.wikibooks", top = "top", year = "2018", mon = "05", day = "03")
plotcount(p1)
expect_equal(p1, "This data is top popular dataset and cannot be plotted")
expect_equal(list(p1), "This data is top popular dataset and cannot be plotted")
as.character(p1)
p1
plotcount(p1)
expect_equal(plotcount(p1), "This data is top popular dataset and cannot be plotted")
p1 <- get_article_vc("Donald_Trump", "20160803", "20201002", "daily")
typeof(plotcount(p1))
plotcount(p1)
validate(plotcount(p1))
plotcount(p1)[1]
plotcount(p1)[1,1]
expect_true(plotcount(p1) != NULL)
plotcount(p1) != NULL
plotcount(p1)[1] != NULL
(plotcount(p1)[1] == NULL)
(1 == NULL)
(1 == 1)
(1 == 2)
(1 != 2)
(1 != NA)
(1 != NULL)
test_that("test plot count", {
test_that("test plot count", {
expect_equal(typeof(plotcount(p2)), "list")
test_that("test plot count", {
expect_equal(typeof(plotcount(p1)), "list")
expect_equal(typeof(plotcount(p2)), "list")
expect_equal(plotcount(p3), "This data is top popular dataset and cannot be plotted")
expect_equal(plotcount(p4), "This data is top popular dataset and cannot be plotted")
})
test_that("test plot count", {
expect_equal(typeof(plotcount(p1)), "list")
expect_equal(typeof(plotcount(p2)), "list")
expect_equal(plotcount(p3), "This data is top popular dataset and cannot be plotted")
expect_equal(plotcount(p4), "This data is top popular dataset and cannot be plotted")
})
test_that("test project top ranking", {
expect_equal(typeof(p1), "list")
expect_equal(nrow(p1), 456)
expect_equal(typeof(p2), "list")
expect_equal(nrow(p2), 991)
expect_equal(typeof(p3), "list")
expect_equal(ncol(p3), 4)
expect_equal(typeof(p4), "list")
expect_equal(p4[1,4], 229000)
})
test_that("test project top ranking", {
expect_equal(typeof(p1), "list")
expect_equal(nrow(p1), 456)
expect_equal(typeof(p2), "list")
expect_equal(nrow(p2), 991)
expect_equal(typeof(p3), "list")
expect_equal(ncol(p3), 4)
expect_equal(typeof(p4), "list")
expect_equal(p4[1,4], 229000)
})
